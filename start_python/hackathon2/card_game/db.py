'''K·∫øt n·ªëi CSDL'''
import mysql.connector as mysql
import pymysql

db = pymysql.connect(
    host = "localhost",
    user = "root",
    passwd = "",
    database = "game_log"
)
cursor = db.cursor(pymysql.cursors.DictCursor)

# def log(winner, players):
#     '''
#     Ghi th√¥ng tin v·ªÅ game v√†o CSDL v√† 2 b·∫£ng games v√† logs

#     B·∫£ng games g·ªìm t√™n ng∆∞·ªùi chi·∫øn th·∫Øng

#     B·∫£ng logs g·ªìm danh s√°ch ng∆∞·ªùi ch∆°i, b·ªô b√†i, ƒëi·ªÉm v√† l√° b√†i l·ªõn nh·∫•t t∆∞∆°ng ·ª©ng v·ªõi game

#     Ch√∫ √Ω, sau khi INSERT v√†o games, c√≥ th·ªÉ l·∫•y id c·ªßa game v·ª´a t·∫°o v·ªõi cursor.lastrowid
#     '''
#     sql = '''INSERT INTO games (winner) VALUES (%s)'''
#     cursor.execute(sql, winner)

#     game_id = cursor.lastrowid

#     sql = f'''
#     INSERT INTO logs (game_id, player, cards, point, biggest_card)
#     VALUES ({game_id}, %(player)s, %(cards)s, %(point)s, %(biggest_card)s)
#     '''
#     cursor.executemany(sql, players)

#     db.commit()

# def get_last_game():
#     '''L·∫•y th√¥ng tin v·ªÅ game g·∫ßn nh·∫•t t·ª´ c·∫£ 2 b·∫£ng games v√† logs'''
#     sql = '''
#     SELECT *
#     FROM games AS g
#     ORDER BY g.play_at DESC
#     '''

#     cursor.execute(sql)
#     game = cursor.fetchone()

#     if not game:
#         raise Exception('Kh√¥ng c√≥ l·ªãch s·ª≠ game\nCh∆°i v√†i game vui v·∫ª ƒëi üòâ\n')

#     sql = f'''
#     SELECT *
#     FROM logs
#     WHERE game_id = {game['game_id']}
#     '''
#     cursor.execute(sql)
#     players = cursor.fetchall()

#     return game, players


# def history():
#     '''
#     L·∫•y th√¥ng tin v·ªÅ l·ªãch s·ª≠ ch∆°i

#     Bao g·ªìm t·ªïng s·ªë game ƒë√£ ch∆°i, s·ªë game chi·∫øn th·∫Øng ·ª©ng v·ªõi m·ªói ng∆∞·ªùi ch∆°i (s·ª≠ d·ª•ng GROUP BY v√† c√°c h√†m t·ªïng h·ª£p)
#     '''
#     sql = '''
#     SELECT
#         winner as player,
#         COUNT(*) AS game_won
#     FROM games AS g
#     WHERE DATE(g.play_at) = CURDATE()
#     GROUP BY player
#     ORDER BY game_won DESC
#     '''

#     cursor.execute(sql)
#     records = cursor.fetchall()

#     if not records:
#         raise Exception('Kh√¥ng c√≥ l·ªãch s·ª≠ game\nCh∆°i v√†i game vui v·∫ª ƒëi üòâ\n')

#     total_game = sum([r['game_won'] for r in records])
#     return total_game, records

def log(winner, players):
    '''
    Ghi th√¥ng tin v·ªÅ game v√†o CSDL v√† 2 b·∫£ng games v√† logs
    B·∫£ng games g·ªìm t√™n ng∆∞·ªùi chi·∫øn th·∫Øng
    B·∫£ng logs g·ªìm danh s√°ch ng∆∞·ªùi ch∆°i, b·ªô b√†i, ƒëi·ªÉm v√† l√° b√†i l·ªõn nh·∫•t t∆∞∆°ng ·ª©ng v·ªõi game
    Ch√∫ √Ω, sau khi INSERT v√†o games, c√≥ th·ªÉ l·∫•y id c·ªßa game v·ª´a t·∫°o v·ªõi cursor.lastrowid
    '''
    query = "INSERT INTO games(winner) VALUES (%(winner)s)"
    cursor.execute(query, { "winner": winner.name})
    db.commit()
    game_id = cursor.lastrowid
    print(game_id)

    query = "INSERT INTO logs (game_id, player, cards, 	point, biggest_card) VALUES (%(game_id)s, %(player)s, %(cards)s, %(point)s, %(biggest_card)s)"
    ## storing values in a variable
    values = []
    for player in players:
        values.append({"game_id" : game_id,
                       "player": player.name,
                       "cards": player.flip_card(),
                       "point": player.point,
                       "biggest_card" : str(player.biggest_card)
                       })
    
    cursor.executemany(query, values)
    db.commit()

def get_last_game():
    '''L·∫•y th√¥ng tin v·ªÅ game g·∫ßn nh·∫•t t·ª´ c·∫£ 2 b·∫£ng games v√† logs'''
    sql = '''SELECT * FROM games ORDER BY game_id DESC limit 1'''
    cursor.execute(sql)
    game = cursor.fetchone()
    logs = None
    
    if game is not None:
        sql = '''SELECT * FROM logs WHERE game_id = "%(game_id)s" ORDER BY log_id'''
        cursor.execute(sql, {"game_id": game["game_id"]})
        logs = cursor.fetchall()
    return game, logs


def history():
    '''
    L·∫•y th√¥ng tin v·ªÅ l·ªãch s·ª≠ ch∆°i
    Bao g·ªìm t·ªïng s·ªë game ƒë√£ ch∆°i, s·ªë game chi·∫øn th·∫Øng ·ª©ng v·ªõi m·ªói ng∆∞·ªùi ch∆°i (s·ª≠ d·ª•ng GROUP BY v√† c√°c h√†m t·ªïng h·ª£p)
    '''
    sql = "SELECT winner, COUNT(winner) as count FROM games WHERE DATE(play_at) = CURDATE() GROUP BY winner ORDER BY `count` DESC"
    cursor.execute(sql)
    return cursor.fetchall()